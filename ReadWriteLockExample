import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReadWriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock;

public class ReadWriteLockExample {
	public static void main(String args[]) {
		ReadWriteLock lock = new ReentrantReadWriteLock();
		ReadWriteLockResource resource = new ReadWriteLockResource(lock);
		for (int i = 0; i < 10; i++) {
			Thread t = new Thread(resource);
			t.setName("Thread_ " + i);
			t.start();
		}
	}
}

class ReadWriteLockResource implements Runnable {
	Lock readLock;
	Lock writeLock;

	List<Associate> associateList = new ArrayList<>();

	int count = 1;

	public ReadWriteLockResource(ReadWriteLock lock) {
		this.readLock = lock.readLock();
		this.writeLock = lock.writeLock();
	}

	public void addAssociate() {
		this.writeLock.lock();
		associateList.add(new Associate("Asscociate_ " + count, count * 2));
		System.out.println(" Thread " + Thread.currentThread().getName() + " writes  "
				+ associateList.get(associateList.size() - 1).getName());

		try {
			Thread.sleep(1000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		count++;
		this.writeLock.unlock();

	}

	public void fetchAssociate() {
		this.readLock.lock();

		// count++;
		System.out.println(" Thread " + Thread.currentThread().getName() + " reads  "
				+ associateList.get(associateList.size() - 1).getName());
		this.readLock.unlock();
	}

	public void run() {

		addAssociate();

		fetchAssociate();
	}
}

class Associate {
	String name;
	int score;

	public Associate(String name, int score) {
		this.name = name;
		this.score = score;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public int getScore() {
		return score;
	}

	public void setScore(int score) {
		this.score = score;
	}
}
